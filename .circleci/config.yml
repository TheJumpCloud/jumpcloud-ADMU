version: 2.1
parameters:
  buildReleaseType:
    description: "Semantic Version increment type of the release. Valid values: major, minor, patch"
    default: "minor"
    type: enum
    enum: ["major", "minor", "patch"]
  PublishToPSGallery:
    description: "When `true` and when run against Master branch, this workflow will publish the latest code to PSGallery"
    type: boolean
    default: true
  ManualModuleVersion:
    description: "When `true` the pipeline will use the Module Version specified in JumpCloud Module JumpCloud.psd1 file"
    type: boolean
    default: false
orbs:
  win: circleci/windows@5.0.0
build-and-sign-ADMU: &build-and-sign-ADMU
  - Build
  - Pester Tests:
      requires:
        - Build
  - Build Module:
      requires:
        - Build
        - Pester Tests
  - Build Help Files:
      requires:
        - Build
        - Pester Tests
        - Build Module
  - Build Nuspec:
      requires:
        - Build
        - Pester Tests
        - Build Module
        - Build Help Files
  - Publish:
      context: aws-credentials
      requires:
        - Build
        - Pester Tests
        - Build Module
        - Build Help Files
        - Build Nuspec
  - Invoke Git Commit:
      requires:
        - Build
        - Pester Tests
        - Build Module
        - Build Help Files
        - Build Nuspec
  - Upload Artifact:
      requires:
        - Build
        - Pester Tests
        - Build Module
        - Build Help Files
        - Build Nuspec
  - Publish Module Validation:
      requires:
        - Build
        - Pester Tests
        - Build Module
        - Build Help Files
        - Build Nuspec
release: &release
  - Build
  - Build Module:
      requires:
        - Build
  - Build Nuspec:
      requires:
        - Build
        - Build Module
  - Publish on PSGallery:
      context: aws-credentials
      requires:
        - Build
        - Build Module
        - Build Nuspec
  - Publish Module Validation:
      requires:
        - Build
        - Build Module
        - Build Nuspec
  - draft-github-release:
      context: github-credentials
      requires:
        - Build
        - Build Module
        - Build Nuspec
        - Publish Module Validation
  - Invoke Git Commit:
      requires:
        - Build
        - Build Module
        - Build Nuspec
        - Publish Module Validation
  - Upload Artifact:
      requires:
        - Build
        - Build Module
        - Build Nuspec
  - Start Sign Job:
      context: github-credentials
      requires:
        - Build
        - Build Module
        - Invoke Git Commit
        - Upload Artifact
workflows:
  version: 2
  ci:
    jobs: *build-and-sign-ADMU
    when:
      and:
        - and:
            - not:
                matches:
                  pattern: "^master$"
                  value: << pipeline.git.branch >>
  release:
    jobs: *release
    when:
      and:
        - equal: [master, << pipeline.git.branch >>]
        - equal: [true, << pipeline.parameters.PublishToPSGallery >>]
jobs:
  Build: # name of your job
    executor: win/default # executor type
    steps:
      # Commands are run in a Windows

      # virtual machine environment
      - checkout
      - run:
          name: Install Required Modules
          shell: powershell.exe
          command: |
            Install-Module -Name:('ps2exe') -Force
      - run:
          name: Build
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./Deploy/Build.ps1 $env:CIRCLE_WORKING_DIRECTORY
      - persist_to_workspace:
          root: .
          paths:
            - .
  Pester Tests:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test Setup
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            . ./Deploy/TestSetup.ps1 -TestOrgConnectKey:($env:PesterConnectKey)
      - run:
          name: Install Required Modules & Set Env Variables for testing
          shell: powershell.exe
          command: |
            Install-Module -Name:('PSScriptAnalyzer') -Force
            Install-Module -Name:('JumpCloud') -Force
            Install-Module -Name:('Pester') -SkipPublisherCheck -Force
            Import-Module -Name:('Pester') -Force
            If (-not [System.String]::IsNullOrEmpty($env:JCApiKey) -and -not [System.String]::IsNullOrEmpty($env:JCOrgId))
            {
                Write-Host ('[VALIDATION] JCApiKey AND JCOrgId have been populated.')
            }
            Else
            {
                Write-Error ("Unable to test because JCApiKey and JCOrgId have not been set.")
            }
      - run:
          name: Invoke Pester
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./jumpcloud-ADMU/Powershell/InvokePester.ps1 << pipeline.parameters.buildReleaseType >>
      - store_test_results:
          name: Uploading test results for ADMU'
          path: ./jumpcloud-ADMU/test_results/
  Build Module:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build Module
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./Deploy/Build-Module.ps1 -ModuleVersionType:("<< pipeline.parameters.buildReleaseType >>") -ModuleName:('JumpCloud.ADMU') -ManualModuleVersion $<< pipeline.parameters.ManualModuleVersion >>
      - persist_to_workspace:
          root: .
          paths:
            - .
  Build Help Files:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build Help Files
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./Deploy/Build-HelpFiles.ps1 -ModuleVersionType:("<< pipeline.parameters.buildReleaseType >>") -ModuleName:('JumpCloud.ADMU')
      - persist_to_workspace:
          root: .
          paths:
            - .
  Build Nuspec:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build .nuspec
          shell: powershell.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./Deploy/BuildNuspecFromPsd1.ps1 -ModuleVersionType:("<< pipeline.parameters.buildReleaseType >>") -ModuleName:('JumpCloud.ADMU') -buildNumber:("$Env:CIRCLE_BUILD_NUM") -commit:("$Env:CIRCLE_SHA1")
      - persist_to_workspace:
          root: .
          paths:
            - .
  Publish:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Dependencies
          shell: pwsh.exe
          command: |
            Install-Module -Name PowerShellGet -AllowPrerelease -RequiredVersion '3.0.0-beta10' -Force
            Install-Module -Name AWS.Tools.Common -Force
            Install-Module -Name AWS.Tools.CodeArtifact -Force
            if ( -not ( Test-Path -Path ./Deploy/utils ) ) {
              mkdir ./Deploy/utils
              invoke-WebRequest https://dist.nuget.org/win-x86-commandline/v3.3.0/nuget.exe -Outfile ./Deploy/utils/nuget.exe
            }
      - run:
          name: Add nuget sources
          shell: pwsh.exe
          command: |
            Set-AWSCredential -AccessKey:($env:AWS_ACCESS_KEY_ID) -SecretKey:($env:AWS_SECRET_ACCESS_KEY)
            $CARepoEndpoint = "$(Get-CARepositoryEndpoint -Domain jumpcloud-artifacts -Region us-east-1 -Repository jumpcloud-nuget-modules -Format nuget)v3/index.json"
            dotnet nuget add source $CARepoEndpoint --name CodeArtifact --username aws --password (Get-CAAuthorizationToken -Domain:("jumpcloud-artifacts") -Region:("us-east-1")).AuthorizationToken
            dotnet nuget add source "https://www.powershellgallery.com/api/v2" --name PSGallery
      - deploy-nupkg:
          source: CodeArtifact
  Publish on PSGallery:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Dependencies
          shell: pwsh.exe
          command: |
            Install-Module -Name PowerShellGet -AllowPrerelease -RequiredVersion '3.0.0-beta10' -Force
            if ( -not ( Test-Path -Path ./Deploy/utils ) ) {
              mkdir ./Deploy/utils
              invoke-WebRequest https://dist.nuget.org/win-x86-commandline/v3.3.0/nuget.exe -Outfile ./Deploy/utils/nuget.exe
            }
      - run:
          name: Add nuget sources
          shell: pwsh.exe
          command: |
            dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
      - deploy-nupkg:
          source: PSGallery
  Publish Module Validation:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - validate-pipeline-param:
          branch: << pipeline.git.branch >>
  Invoke Git Commit:
    executor: win/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6b:97:dc:6d:d1:d1:3f:67:62:c4:ad:2d:96:3c:9a:d7"
      - attach_workspace:
          at: .
      - run:
          when: on_success
          name: "Commit ADMU Module to << pipeline.git.branch >>"
          shell: pwsh.exe
          command: |
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git pull
            git add -A
            git status
            git commit -m "Updating ADMU Module;[skip ci]"
            git push origin << pipeline.git.branch >>
  Upload Artifact:
    executor: win/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - store_artifacts:
          path: ./
          destination: artifact-file
  Start Sign Job:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          name: Start Sign Exe Job
          command: |
            curl --request POST --url 'https://api.github.com/repos/TheJumpCloud/jumpcloud-ADMU/dispatches' --header "authorization: Bearer $GITHUB_TOKEN" --data '{"event_type": "Sign Exe"}'
  draft-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Draft Release on GitHub"
          command: |
            # Module Version
            VERSION=$(grep -o '\d\+\.\d\+\.\d\+' /root/project/jumpcloud-ADMU/JumpCloud.ADMU.psd1)
            TITLE="JumpCloud ADMU v$VERSION"
            # Get the changelog text between the latest release # and the next sequential "## SemanticVersionNumber"
            CHANGELOG=$(cat /root/project/ModuleChangelog.md |awk "/^## $VERSION/{ f = 1; next } /## [0-9]+.[0-9]+.[0-9]+/{ f = 0 } f")
            TAG="v$VERSION"
            BODY="$TITLE $CHANGELOG"
            # Post Draft Release
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "$TITLE" -b "$BODY" -delete -draft "$TAG" /root/project/jumpcloud-ADMU/Exe
commands:
  deploy-nupkg:
    parameters:
      source:
        description: Name of the source to deploy to
        type: string
    steps:
      - run:
          name: Pack nuspec
          command: |
            ./Deploy/utils/nuget.exe pack ./jumpcloud-ADMU/JumpCloud.ADMU.nuspec
      - run:
          name: Publishing to "<< parameters.source >>" repo
          shell: pwsh.exe
          command: |
            $NupkgPath = (Get-ChildItem -Path:("./*.nupkg")).FullName
            If('<< parameters.source >>' -eq 'CodeArtifact'){dotnet nuget push $NupkgPath --source << parameters.source >>}
            ElseIf('<< parameters.source >>' -eq 'PSGallery'){dotnet nuget push $NupkgPath --source << parameters.source >> --api-key $env:NuGetApiKey}
            Else {Write-Error "Unknown source value: << parameters.source >>"}
  validate-pipeline-param:
    parameters:
      branch:
        description: Name of the branch to deploy to
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Reset Publish To Gallery Param
          shell: bash
          environment:
            branch: << parameters.branch >>
          command: |
            sudo snap install yq
            publish=$(/snap/bin/yq e '.parameters.PublishToPSGallery.default' ~/project/.circleci/config.yml)
            if [[ $branch != 'master' ]]; then
                echo "Running on $branch, checking to see if PublishToPSGallery param is set..."
                if [[ $publish == "false" ]]; then
                  echo "CircleCI Param PublishToPSGallery is not set to 'true' (currently: $publish) - Module will not publish on merge to master"
                  exit 1
                elif [[ $publish == "true" ]]; then
                  echo "CircleCI Param PublishToPSGallery is set to 'true' - Module will publish on merge to master"
                fi
            fi
            if [[ $branch == 'master' ]]; then
                echo "Running on $branch, resetting PublishToPSGallery param..."
                /snap/bin/yq e '.parameters.ManualModuleVersion.default = false' -i ~/project/.circleci/config.yml
                /snap/bin/yq e '.parameters.PublishToPSGallery.default = false' -i ~/project/.circleci/config.yml
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
